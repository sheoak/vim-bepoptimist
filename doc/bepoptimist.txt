*Bepoptimist.txt* Plugin to handle bépo layout better

Author:  sheoak <yannick [at] sheoak.fr>
licence: Same terms as Vim itself (see |licence|)

Bepoptimist is a vim plugin that remaps and adds vim keymaps for Bépo keyboard.

It does more than just remapping *jklm* and suggest a lot of keymaps that
have been designed to be easy to access in bépo layout. It also take advantage
of keys not available or hard to access in qwerty or azerty layouts, like œ,
æ, …

This plugin is under development — no backward compatibility guaranteed — for
now. I am still looking for ways to take advantage of the bepo layout as much
as possible. Suggestions are very welcome.

==========================================================================
CONTENTS                                            *bepoptimist-contents*

    1. Usage ............................. |bepoptimist-usage|
        1.1 Installation ................. |bepoptimist-install|
        1.2 Getting started .............. |bepoptimist-getting-started|
    2. Mappings .......................... |bepoptimist-mappings|
        2.1 Prefix ....................... |bepoptimist-prefix|
        2.2 Text-obejcts ................. |bepoptimist-text-objects|
        2.3 Layout modifications ......... |bepoptimist-layout|
        2.4 Plugins ...................... |bepoptimist-plugins|
    2. Configuration ..................... |bepoptimist-configuration|
    3. FAQ ............................... |bepoptimist-faq|
    4. Licence ........................... |bepoptimist-licence|
    5. Contributing ...................... |bepoptimist-contribute|
    6. Changelog ......................... |bepoptimist-changelog|
    7. Credits ........................... |bepoptimist-credits|

====================================================================
Section 1: Usage                                       *bepoptimist-usage*

2.1 Installation                                     *bepoptimist-install*

See README.md for install instructions.


2.2 Getting started                          *bepoptimist-getting-started*

It is important to note that the remapped homerow is on the right of the
standard vim homerow (tsrn), so it will take some time to adjust. Once you
will get used to it you will never want to go back as it feels way more
natural than moving to c constantly! See |bepoptimist-layout| for details on
the homerow replacement. There is no plan to make this configurable, as it
impact the whole layout.

The other goal of bepoptimist is to give a quick and clean access to famous
plugins. It regroups mapping under prefixes like "’" or ",". See
|bepoptimist-plugins| for details.


====================================================================
Section 2: Mappings                                    *bepoptimist-mappings*

The philosophy of this plugin is to keep vim native keys if possible, while
preserving the position of the home row. The remapping of the home row is
optional. It regroups mappings by categories using a prefix for each group.
It also try to have mapping with mnemonics, keeping vim philosophy in mind.
French letters have french mnemonics.

------------------------------------------------------------------------------
2.1 Prefix mappings                                     *bepoptimist-prefix*

The following keys are reserved for group of mappings.

*é*   buffer prefix ([é]cran in French)
      it acts as built-in "CTRL-w" with some additional mappings

*,*   file manipulation prefix. Include built-in functions as well as plugins
    actions.

See |bepoptimist-plugins| for additionnal prefixes.


2.1.1 Buffer and window mappings (é)                    *bepotimist-buffers*

Mapping starting by CTRL-w have been alias to "é" with the exception of the
homerow that has been remapped. It also provides additionnal mappings:

*ét*      move to left window
*én*      move to right window
*és*      move to bottom window
*ér*      move to top window
*éh*      horizontal split
*é<space> close quickfix buffer
*é<bs>    close location buffer
*éé*      Previous buffer (toggle)

------------------------------------------------------------------------------
2.2 Text-objects                                   *bepoptimist-text-objects*

                                                    *v_é* *o_é*
é               the whole buffer

Examples:

    dé      Delete the whole buffer
    yé      Yank all buffer content
    =é      Retab all buffer content
    gqé     Reformat all buffer content

                                                    *v_ê* *o_ê*
ê               select [count] last char(s) of the line
                d2ê: delete 2 last char of the line
                                                    *v_Ê* *o_Ê*
Ê               select [count] first char(s) of the line

------------------------------------------------------------------------------
2.3 Layout modifications                                 *bepoptimist-layout*

Because of the homerow remapping you will lose t, s, r and n mappings and
their uppercase versions. S key is not remapped as you can use cn and cc to
replace s and S.

    t is moved to à (symmetrical to f, French mnemonic "aller [à]")
    r is moved to l (no mnemonic, sorry!)
    n is moved to h (mnemonic: [h]op hop hop…)
    , is moved to è
    ; is moved to È
    < is moved to « for direct access
    > is moved to » for direct access
    k is moved to gh
    gt is moved to N (next tab)
    gT is moved to T (previous tab)


Additionnal:

    è is an alias to CTRL-w
    æ for previous buffer
    € for next buffer
    S is an alias for [
    R is an alias for ]

Note: S/R make vim-unimpaired access a bit easier.


------------------------------------------------------------------------------
2.4 Plugins prefixes                                    *bepoptimist-plugins*

Bepoptimist includes mapping for famous plugins so that they work better with
bepo layout. Bepoptimist try to preserve as many original mappings as possible
and mainly remaps the home row keys when there is a conflict.

Some plugins recognized and affected to reserved keys:

u              vim-surround by Tim Pope (s was conflicting)
’              vim-fugitive by Tim Pope (typographic apostrophe)
’              vim-gitgutter, by Andy Stewart
\              vim-easy-align, by Junegunn Choi
k              vim-sneak, by Justin M. Keyes (s was conflicting)
,              FZF, by Junegunn Choi
ß              vim-grammarous, by Linda_pp (on key s, like "spell")
þ              vim-table-mode, by Dhruva Sagar (on key t, like "table")


2.4.1 Fugitive and git-gutter

All fugitive mapping start by "’":

*’b*  :Gblame
*’<CR>*  :Gcommit
*’d*  :Gvdiffsplit
*’e*  :Gedit
*’fd* :Gremove
*’fm* :Gmove
*’l*  :G pull
*’h*  :Git log
*’m*  :Gmerge
*’p*  :G push
*’r*  :G rebase
*’s*  :Gstatus
*’w*  :Gwrite

vim-gitgutter mappings also start by "’":

*’a* Stage hunk
*’u* Undo stage hunk
*’v* Preview hunk diff

Git gutter also provides text-objects, that are moved due to conflicts with
vim-targets. See plugin documentation for details.

omap ih inner git gutter hunk
omap ah ambient git gutter hunk

2.4.2 Sneak

Sneak is mapped to key "k" and "gk" for label mode.

*k*     sneak forward
*K*     sneak backward
*gk*     sneak forward, label mode
*gK*     sneak backward, label mode


2.4.3 Surround

Surround is moved to u and works as in surround documentation. Just replace
s by u and S by U. So you get cu, du, yu…


2.4.4 FZF

FZF mappings start by ",".

Section is subject to change. You can see source file to check mappings for
now.


2.4.5 Grammarous

Section is subject to change. You can see source file to check mappings for
now.


2.4.6 Vim-table-mode

*þþ* Toggle table mode
*þs* Sort table
*þf* Add formula
*þe* Eval formula
*þt* Tableize (visual and normal mode)
*þd* <Plug>(table-mode-tableize-delimiter)


2.4.7 Camel case motions

The key ç is reserved for camel case motions via CamelCaseMotion plugin.
It works similar to w/W but with camelCase words. See plugin documentation for
details.

Motions:

*ç* camel case motion formard, like w
*Ç* camel case motion backward, like W
*gç* camel case motion formard, like b
*gÇ* camel case motion formard, like ge

Text-objects:

*aç* inner camel case word
*iç* ambient camel case word


==============================================================================
3. Configuration                                *bepoptimist-configuration*

Disable the plugin:

    let g:bepoptimist_enable = 0

If you do not wish to remap the home row and are using the keyboard arrows:

    let g:bepoptimist_remap_homerow = 0


==============================================================================
3. FAQ                                          *bepoptimist-faq*

- "w" is terrible on bepo, why not remapping it to "è"?

Bepoptimist tries to keep vim’s shortcuts as they are, because vim has not been
designed for shortcuts ergonomy, but for mnemonics. "è" is hard to remember
compared to "w" for *word*. You can however switch to "bepow" keyboard layout
system wide.

- Why mixing French an English Mnemonics

You cannot find English Mnemonics for French letters like "é" or "è". I used
French words for these cases, when I can. Digraphs like "œ" or "æ" are however
using English mnemonics.


==============================================================================
4. Licence                                      *bepoptimist-licence*

Same at vim itself. See |licence|.


==============================================================================
5. Contributing                                 *bepoptimist-contribute*

You have ideas to make bepoptimist better? Any suggestions are very welcome.

Fork the project on GitHub and send a pull request:

    GitHub:    http://github.com/sheoak/vim-bepoptimist


==============================================================================
6. Changelog                                    *bepoptimist-changelog*

v0.4
    * Complete refactoring
v0.0.2
    * Experimental version, use at your own risk!
    * No backward compatibility guaranteed


==============================================================================
7. Credits                                      *bepoptimist-credits*

Bepoptimist was originally written by Yannick Huerre to improve the experience
of vim using a bepo keyboard.

==============================================================================

vim:tw=78:ts=8:ft=help:norl:noet:fen:
